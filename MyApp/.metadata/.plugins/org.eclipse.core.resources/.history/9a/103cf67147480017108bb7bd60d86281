package com.microservice.comic.gateway;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.messaging.Source;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.hateoas.Resources;
import org.springframework.http.HttpMethod;
import org.springframework.messaging.MessageChannel;
import org.springframework.messaging.support.MessageBuilder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.client.RestTemplate;

import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

@Controller
@RequestMapping("/comicstore")
public class ComicStoreController {

	private final RestTemplate comicsRestTemplate;
	private final RestTemplate companyRestTemplate;

	@Autowired
	public ComicStoreController(RestTemplate comicsRestTemplate, RestTemplate companyRestTemplate) {
		super();
		this.comicsRestTemplate = comicsRestTemplate;
		this.companyRestTemplate = companyRestTemplate;
	}

	@HystrixCommand(fallbackMethod = "defaultFallback")
	@RequestMapping(method = RequestMethod.GET, value = "/comicsfulldetails")
	public String getComicsAndCompany(Model model) {
		Collection<Comics> comics = this.comicsRestTemplate.exchange("http://comics-service/comics", HttpMethod.GET,
				null, new ParameterizedTypeReference<Resources<Comics>>() {
				}).getBody().getContent();

		Collection<Company> company = this.comicsRestTemplate.exchange("http://company-service/company", HttpMethod.GET,
				null, new ParameterizedTypeReference<Resources<Company>>() {
				}).getBody().getContent();

		List<ComicCompany> comicCompany = new ArrayList<>();
		for (Comics c : comics) {
			for (Company cp : company) {
				System.out.println(cp.getCompanyid());
				if (c.getCompanyid() == cp.getCompanyid()) {
					ComicCompany cc = new ComicCompany();
					cc.setComic(c);
					cc.setCompany(cp);
					comicCompany.add(cc);
				}
			}
		}
		model.addAttribute("comicCompanyModel", comicCompany);
		return "index";

	}
	
	/*@HystrixCommand(fallbackMethod = "defaultFallback")
	@RequestMapping(method = RequestMethod.POST, value = "/comicsfulldetails/add")
	public String addComics(Model model) {
		
		return "index";

	}*/
	
	@Autowired
	private Source output;

	@HystrixCommand(fallbackMethod = "defaultFallback")
	@RequestMapping(method = RequestMethod.GET, value = "/comicsfulldetails/add")
	public String addComic() {
		MessageChannel channel = this.output.output();
		channel.send(MessageBuilder.withPayload(comic.getComicname()).build());
		return "index";
	}

	private String defaultFallback(Model model) {
		return "fallback";
	}
}
